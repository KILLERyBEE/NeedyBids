<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Needybids – My Activity</title>
  <link rel="icon" href="images/favicon-32x32.png" type="image/png" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=Inconsolata&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/header-all.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <script src="https://kit.fontawesome.com/943c3c74fd.js" crossorigin="anonymous"></script>
  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
  <style>
    :root {
      --brand: #02511A;
      --brand-dark: #078454;
      --text: #000000;
      --muted: #6b7280;
      --bg: #f9fafb;
      --border: #e5e7eb;
      --surface: #ffffff;
      --radius: 12px;
      --shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 4px 12px rgba(0, 0, 0, .04);
      --table-row-hover: #f3f4f6;
      }

    /* Activity page specific styles */
    body{
      background-color: #f9fafc;
    }
    main {
      flex: 1;
      padding-inline:20px;
      padding-bottom: 150px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }

    /* Tabs */
    .tabs {
      display: flex;
      gap: 1.5rem;
      margin: 8px 0;
      border-bottom: 1px solid var(--border);
      margin-top: 20px;
    }

    .tablink {
      position: relative;
      padding:10px 0;
      padding-top: 0;
      color: var(--muted);
      font-weight: 600;
      text-decoration: none;
      cursor: pointer;
      transition: color 0.2s ease;
    }

    .tablink:hover {
      color: var(--brand-dark);
    }

    .tablink.active {
      color: var(--brand);
    }

    .tablink.active::after {
      content: "";
      position: absolute;
      left: 0;
      right: 0;
      bottom: -1px;
      height: 3px;
      background: var(--brand);
      border-radius: 2px 2px 0 0;
    }

    /* Tab content */
    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* Filters */
    .filters {
      margin: 1rem 0 1.25rem;
      display: flex;
      gap: .75rem;
      flex-wrap: wrap;
      align-items: center;
    }

    .filters select {
      padding: .55rem .8rem;
      border: 1px solid var(--border);
      border-radius: var(--radius);
      background: #fff;
    }

    .filters label {
      font-size: .875rem;
      color: var(--muted);
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    /* Card that contains the table */
    .card {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      overflow: hidden;
    }

    /* Table styles */
    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 700px;
    }

    thead tr {
      background: #f3f4f6;
      color: #374151;
    }

    th,
    td {
      padding: .9rem 1.1rem;
      border-bottom: 1px solid var(--border);
      text-align: left;
      font-size: .925rem;
      vertical-align: middle;
    }

    tbody tr:hover {
      background: var(--table-row-hover);
    }

    /* Loading spinner */
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    .loading-spinner {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      border: 3px solid rgba(2, 81, 26, 0.3);
      border-radius: 50%;
      border-top-color: var(--brand);
      animation: spin 1s ease-in-out infinite;
    }

    /* Responsive table */
    @media (max-width: 768px) {
      table {
        min-width: 0;
      }

      thead {
        display: none;
      }

      tbody,
      tr,
      td {
        display: block;
        width: 100%;
      }

      tr {
        background: #fff;
        margin: 0 0 1rem 0;
        border: 1px solid var(--border);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
      }

      /* Special styling for empty state on mobile */
      tr.empty-state-row {
        background: transparent;
        border: none;
        box-shadow: none;
      }

      tr.empty-state-row td {
        text-align: center;
        justify-content: center;
      }

      tr.empty-state-row td::before {
        content: none;
      }

      tr:hover {
        background: #fff;
      }

      td {
        border: none;
        border-bottom: 1px solid var(--border);
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
        padding: .75rem 1rem;
      }

      td:last-child {
        border-bottom: none;
      }

      td::before {
        content: attr(data-label);
        font-weight: 600;
        color: var(--muted);
        flex: 0 0 130px;
        white-space: nowrap;
      }

      th:last-child,
      td:last-child {
        text-align: left;
      }
      .tabs{
        margin-top: 0px;
      }
      .filters {
        align-items: flex-start;
      }
    }
  </style>
</head>

<body>
  <%- include('header-all') %>
    <main>
    <div class="tabs" role="tablist">
      <a class="tablink active" href="#" role="tab" aria-selected="true" data-tab="bids">My Bids</a>
    </div>

    <!-- My Bids Tab Content -->
    <div id="bids-content" class="tab-content active">
      <div class="filters" aria-label="Sort and Filters">
        <label>
          Sort order
          <select id="bidsSort">
            <option>Newest first</option>
            <option>Oldest first</option>
            <option>Price: Low to High</option>
            <option>Price: High to Low</option>
          </select>
        </label>
        <label>
          Year
          <select id="bidsYear">
            <option>Any</option>
            <option>2025</option>
            <option>2024</option>
            <option>2023</option>
          </select>
        </label>
        <label>
          Price
          <select id="bidsPrice">
            <option>Any</option>
            <option>Below ₹5L</option>
            <option>₹5L – ₹10L</option>
            <option>₹10L – ₹20L</option>
            <option>Above ₹20L</option>
          </select>
        </label>
      </div>

      <div class="card" role="region" aria-label="My bids table">
        <table role="table">
          <thead>
            <tr role="row">
              <th scope="col">ID</th>
              <th scope="col">Product Name</th>
              <th scope="col">Category</th>
              <th scope="col">Date &amp; Time</th>
              <th scope="col">Location</th>
              <th scope="col">Action</th>
            </tr>
          </thead>
          <tbody id="bidsTableBody">
            <!-- Data will be loaded here dynamically -->
          </tbody>
        </table>
      </div>
    </div>

  <!-- Listings tab removed -->
  </main>

  <%- include('footer') %>
  <script src="/js/header-all.js"></script>
  <script>
    // Configuration and state management
    const AppState = {
      isLoggedIn: true,
      currentTab: 'bids',
      elements: {}
    };

    // DOM Element Cache for better performance
    const ElementCache = {
      init() {
        this.cache = {
          profilePic: document.getElementById("profilePic"),
          sidebarProfile: document.getElementById("sidebarProfile"),
          sidebarLogout: document.getElementById("sidebarLogout"),
          notificationIcon: document.getElementById("notificationIcon"),
          notificationIconMobile: document.getElementById("notificationIconMobile"),
          signInBtn: document.getElementById("signInBtn"),
          signInBtnMobile: document.getElementById("signInBtnMobile"),
          sidebar: document.getElementById("sidebar"),
          searchOverlay: document.getElementById("searchOverlay"),
          // Tab elements
          tabLinks: document.querySelectorAll('.tablink'),
          bidsContent: document.getElementById('bids-content'),
          // Bids-specific elements
          bidsTableBody: document.getElementById('bidsTableBody'),
          bidsSort: document.getElementById('bidsSort'),
          bidsYear: document.getElementById('bidsYear'),
          bidsPrice: document.getElementById('bidsPrice')
        };
        return this.cache;
      },

      get(elementId) {
        return this.cache[elementId];
      }
    };

    // Tab Controller for managing tab switching
    const TabController = {
      init() {
        this.elements = ElementCache.cache;
        this.attachTabEventListeners();
      },

      attachTabEventListeners() {
        this.elements.tabLinks.forEach(tabLink => {
          tabLink.addEventListener('click', (e) => {
            e.preventDefault();
            const tabType = e.target.getAttribute('data-tab');
            this.switchTab(tabType);
          });
        });
      },

      switchTab(tabType) {
        // Update app state
        AppState.currentTab = tabType;

        // Update tab links visual state
        this.elements.tabLinks.forEach(link => {
          const isActive = link.getAttribute('data-tab') === tabType;
          link.classList.toggle('active', isActive);
          link.setAttribute('aria-selected', isActive.toString());
        });

        // Show/hide tab content
        this.elements.bidsContent.classList.toggle('active', tabType === 'bids');
        this.elements.listingsContent.classList.toggle('active', tabType === 'listings');

        // Load data for the active tab
        if (tabType === 'bids') {
          BidsController.fetchAndDisplayBids();
        } else if (tabType === 'listings') {
          ListingsController.fetchAndDisplayListings();
        }
      }
    };

    // UI Controller for better organization
    const UIController = {
      init() {
        this.elements = ElementCache.init();
        this.updateUIBasedOnLoginState();
      },

      updateUIBasedOnLoginState() {
        const { isLoggedIn } = AppState;
        const elementsToShow = isLoggedIn
          ? ['profilePic', 'sidebarProfile', 'sidebarLogout', 'notificationIcon', 'notificationIconMobile']
          : ['signInBtn', 'signInBtnMobile'];

        const elementsToHide = isLoggedIn
          ? ['signInBtn', 'signInBtnMobile']
          : ['profilePic', 'sidebarProfile', 'sidebarLogout', 'notificationIcon', 'notificationIconMobile'];

        this.toggleElementsVisibility(elementsToShow, false);
        this.toggleElementsVisibility(elementsToHide, true);
      },

      toggleElementsVisibility(elementIds, shouldHide) {
        elementIds.forEach(id => {
          const element = this.elements[id];
          if (element) {
            element.classList.toggle('hidden', shouldHide);
          }
        });
      },

      toggleSidebar() {
        this.elements.sidebar?.classList.toggle("active");
      },

      toggleSearch() {
        this.elements.searchOverlay?.classList.toggle("active");
      }
    };

    // Helper functions for formatting
    const FormatHelpers = {
      formatPrice(price) {
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          maximumFractionDigits: 0
        }).format(price);
      },

      formatDate(dateString) {
        const date = new Date(dateString);
        const options = {
          day: '2-digit',
          month: 'short',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        };
        return date.toLocaleDateString('en-IN', options);
      },

      getStatusBadge(status) {
        const statusClass = `status-${status.toLowerCase()}`;
        return `<span class="status-badge ${statusClass}">${status}</span>`;
      }
    };

    // Bids functionality - optimized and modular
    const BidsController = {
      init() {
        this.elements = ElementCache.cache;
        this.attachEventListeners();
        this.fetchAndDisplayBids();
      },

      attachEventListeners() {
        const filters = [
          this.elements.bidsSort,
          this.elements.bidsYear,
          this.elements.bidsPrice
        ];

        filters.forEach(select => {
          if (select) {
            select.addEventListener('change', () => this.fetchAndDisplayBids());
          }
        });
      },

      showLoading() {
        if (this.elements.bidsTableBody) {
          this.elements.bidsTableBody.innerHTML = `
            <tr>
              <td colspan="7" style="text-align: center; padding: 2rem;">
                <div class="loading-spinner"></div>
                <p style="margin-top: 0.5rem;">Loading bids...</p>
              </td>
            </tr>
          `;
        }
      },

      showError(message) {
        if (this.elements.bidsTableBody) {
          this.elements.bidsTableBody.innerHTML = `
            <tr>
              <td colspan="7" style="text-align: center; padding: 2rem; color: #dc2626;">
                ${message}
              </td>
            </tr>
          `;
        }
      },

      showEmptyState() {
        if (this.elements.bidsTableBody) {
          this.elements.bidsTableBody.innerHTML = `
            <tr class="empty-state-row">
              <td colspan="7" style="text-align: center; padding: 2rem;">
                No bids found matching your criteria
              </td>
            </tr>
          `;
        }
      },

      renderBids(bids) {
        if (!this.elements.bidsTableBody) return;
        this.elements.bidsTableBody.innerHTML = bids.map(bid => `
          <tr role="row">
            <td data-label="ID">#${bid._id?.toString().slice(-4) || ''}</td>
            <td data-label="Product Name">${bid.carname}</td>
            <td data-label="Category">${bid.category || '-'}</td>
            <td data-label="Date &amp; Time">${FormatHelpers.formatDate(bid.datetime)}</td>
            <td data-label="Location">${bid.location}</td>
            <td data-label="Action"><a href="#">${bid.action || 'View details'}</a></td>
          </tr>
        `).join('');
      },



      async fetchAndDisplayBids() {
        try {
          this.showLoading();
          const response = await fetch('/api/activity/my-activities', {
            method: 'GET',
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
          }
          const data = await response.json();
          const activities = data.activities || [];
          if (!Array.isArray(activities) || activities.length === 0) {
            this.showEmptyState();
            return;
          }
          // Map activities to the expected bid structure used by renderBids
          // Get location from localStorage if not present in activity
          const localLocation = localStorage.getItem('location') || '-';
          const mapped = activities.map(act => ({
            _id: act._id,
            carname: act.itemTitle || (act.meta && act.meta.itemTitle) || 'Item',
            category: act.category || '-',
            datetime: act.createdAt,
            location: act.location || '-',
            action: `${act.action} ${act.amount ? '₹' + act.amount.toLocaleString('en-IN') : ''}`
          }));

          this.renderBids(mapped);
        } catch (error) {
          console.error('Error fetching activities:', error);
          this.showError('Failed to load activities. Please try again later.');
        }
      },

      getAuthToken() {
        // Get authentication token from localStorage, sessionStorage, or cookies
        return localStorage.getItem('authToken') || 
               sessionStorage.getItem('authToken') || 
               this.getCookie('authToken');
      },

      getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
      }
    };

    // Listings functionality
    const ListingsController = {
      init() {
        this.elements = ElementCache.cache;
        this.attachEventListeners();
      },

      attachEventListeners() {
        const filters = [
          this.elements.listingsSort,
          this.elements.listingsYear,
          this.elements.listingsPrice
        ];

        filters.forEach(select => {
          if (select) {
            select.addEventListener('change', () => this.fetchAndDisplayListings());
          }
        });
      },

      showLoading() {
        if (this.elements.listingsTableBody) {
          this.elements.listingsTableBody.innerHTML = `
            <tr>
              <td colspan="8" style="text-align: center; padding: 2rem;">
                <div class="loading-spinner"></div>
                <p style="margin-top: 0.5rem;">Loading listings...</p>
              </td>
            </tr>
          `;
        }
      },

      showError(message) {
        if (this.elements.listingsTableBody) {
          this.elements.listingsTableBody.innerHTML = `
            <tr>
              <td colspan="8" style="text-align: center; padding: 2rem; color: #dc2626;">
                ${message}
              </td>
            </tr>
          `;
        }
      },

      showEmptyState() {
        if (this.elements.listingsTableBody) {
          this.elements.listingsTableBody.innerHTML = `
            <tr>
              <td colspan="8" style="text-align: center; padding: 2rem;">
                No listings found matching your criteria
              </td>
            </tr>
          `;
        }
      },

      renderListings(listings) {
        if (!this.elements.listingsTableBody) return;

        this.elements.listingsTableBody.innerHTML = listings.map(listing => `
          <tr role="row">
            <td data-label="ID">#${listing.listingId}</td>
            <td data-label="Description">${listing.description}</td>
            <td data-label="Date &amp; Time">${FormatHelpers.formatDate(listing.dateTime)}</td>
            <td data-label="Car Name">${listing.carName}</td>
            <td data-label="Price">${FormatHelpers.formatPrice(listing.price)}</td>
            <td data-label="Location">${listing.location}</td>
            <td data-label="Status">${FormatHelpers.getStatusBadge(listing.status)}</td>
            <td data-label="Action"><a href="#">View details</a></td>
          </tr>
        `).join('');
      },



      async fetchAndDisplayListings() {
        try {
          this.showLoading();

          const params = new URLSearchParams({
            sort: this.elements.listingsSort?.value || 'Newest first',
            year: this.elements.listingsYear?.value || 'Any',
            priceRange: this.elements.listingsPrice?.value || 'Any'
          });

          const response = await fetch(`/api/listings?${params.toString()}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${this.getAuthToken()}`
            }
          });

          if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          const listings = data.listings || data; // Handle different response structures

          if (!Array.isArray(listings) || listings.length === 0) {
            this.showEmptyState();
            return;
          }

          this.renderListings(listings);

        } catch (error) {
          console.error('Error fetching listings:', error);
          this.showError('Failed to load listings. Please try again later.');
        }
      },

      getAuthToken() {
        // Get authentication token from localStorage, sessionStorage, or cookies
        return localStorage.getItem('authToken') || 
               sessionStorage.getItem('authToken') || 
               this.getCookie('authToken');
      },

      getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
      }
    };

    // Event Listeners
    const EventManager = {
      init() {
        this.attachEventListeners();
      },

      attachEventListeners() {
        document.addEventListener('click', (e) => this.handleDocumentClick(e));
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
      },

      handleDocumentClick(e) {
        const sidebar = ElementCache.get('sidebar');
        const hamburgers = document.querySelectorAll('.hamburger');

        if (sidebar && sidebar.classList.contains('active')) {
          const isClickInsideSidebar = sidebar.contains(e.target);
          const isHamburgerClick = Array.from(hamburgers).some(h => h.contains(e.target));

          if (!isClickInsideSidebar && !isHamburgerClick) {
            UIController.toggleSidebar();
          }
        }
      },

      handleKeyDown(e) {
        if (e.key === 'Escape') {
          const sidebar = ElementCache.get('sidebar');
          const searchOverlay = ElementCache.get('searchOverlay');

          if (sidebar?.classList.contains('active')) {
            UIController.toggleSidebar();
          }
          if (searchOverlay?.classList.contains('active')) {
            UIController.toggleSearch();
          }
        }
      }
    };

    // Application initialization
    const App = {
      init() {
        UIController.init();
        TabController.init();
        EventManager.init();
        BidsController.init();
        ListingsController.init();
      }
    };

    // Initialize app when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => App.init());
    } else {
      App.init();
    }

    // Expose necessary functions globally for inline event handlers
    window.UIController = UIController;
  </script>
</body>

</html>